import "Srl/Console.alusus";
import "Srl/Memory.alusus";
import "Srl/String.alusus";
import "libcivetweb.so";

module Http {
    type Context{
        def stopFlag: int;             /* Should we stop event loop */
    };

    type Callbacks{
        /* Called when civetweb has received new HTTP request.
        If the callback returns one, it must process the request
        by sending valid HTTP headers and a body. Civetweb will not do
        any further processing. Otherwise it must return zero.
        Note that since V1.7 the "begin_request" function is called
        before an authorization check. If an authorization check is
        required, use a request_handler instead.
        Return value:
            0: civetweb will process the request itself. In this case,
                the callback must not send any data to the client.
            1-999: callback already processed the request. Civetweb will
                    not send any data after the callback returned. The
                    return code is stored as a HTTP status code for the
                    access log. */
        def beginRequest: ptr[func (connection: ptr[Connection]): Int];

        /* Called when civetweb has finished processing request. */
        def endRequest: ptr[func (connection: ptr[Connection], replyStatusCode: Int)];

        /* Called when civetweb is about to log a message. If callback returns
        non-zero, civetweb does not log anything. */
        def logMessage: ptr[func (connection: ptr[Connection], message: ptr[Char]): Int];

        /* Called when civetweb is about to log access. If callback returns
        non-zero, civetweb does not log anything. */
        def logAccess: ptr[func (connection: ptr[Connection], message: ptr[Char]): Int];

        /* Called when civetweb initializes SSL library.
        Parameters:
            userData: parameter user_data passed when starting the server.
        Return value:
            0: civetweb will set up the SSL certificate.
            1: civetweb assumes the callback already set up the certificate.
            -1: initializing ssl fails. */
        def initSsl: ptr[func (sslContext: ptr[Void], userData: ptr[Void]): Int];

        /* Called when civetweb is closing a connection.  The per-context mutex is
	   locked when this is invoked.  This is primarily useful for noting when
	   a websocket is closing and removing it from any application-maintained
	   list of clients.
	   Using this callback for websocket connections is deprecated: Use
	   mg_set_websocket_handler instead. */
       def connectionClose: ptr[func (connection: ptr[Connection]): Void];

        /* Called when civetweb tries to open a file. Used to intercept file open
        calls, and serve file data from memory instead.
        Parameters:
            path:     Full path to the file to open.
            dataLen: Placeholder for the file size, if file is served from
                        memory.
        Return value:
            NULL: do not serve file from memory, proceed with normal file open.
            non-NULL: pointer to the file contents in memory. data_len must be
            initilized with the size of the memory block. */
        def openFile: ptr[func (connection: ptr[Connection],
                                path: ptr[Char],
                                dataLen: ptr): Char];

        /* Called when civetweb is about to serve Lua server page, if
        Lua support is enabled.
        Parameters:
            luaContext: "lua_State *" pointer. */
        def initLua: ptr[func (connection: ptr[Connection], luaContext: ptr[Void]): Void];

        /* Called when civetweb is about to send HTTP error to the client.
        Implementing this callback allows to create custom error pages.
        Parameters:
            status: HTTP error status code.
        Return value:
            1: run civetweb error handler.
            0: callback already handled the error. */
        def httpError: ptr[func (connection: ptr[Connection], status: Int): Int];

        /* Called after civetweb context has been created, before requests
        are processed.
        Parameters:
            context: context handle */
        def initContext: ptr[func (context: ptr[Context]): Void];

        /* Called when a new worker thread is initialized.
        Parameters:
            context: context handle
            threadType:
            0 indicates the master thread
            1 indicates a worker thread handling client connections
            2 indicates an internal helper thread (timer thread)
            */
        def initThread: ptr[func (context: ptr[Context], threadType: Int): Void];

        /* Called when civetweb context is deleted.
        Parameters:
            context: context handle */
        def exitContext: ptr[func (context: ptr[Context]): Void];
    };

    type RequestInfo {
        def requestMethod: ptr[Char]; /* "GET", "POST", etc */
        def requestUri: ptr[Char];    /* URL-decoded URI (absolute or relative,
                                    * as in the request) */
        def localUri: ptr[Char];      /* URL-decoded URI (relative). Can be NULL
                                    * if the request_uri does not address a
                                    * resource at the server host. */
        def uri: ptr[Char];            /* Deprecated: use local_uri instead */
        def httpVersion: ptr[Char];   /* E.g. "1.0", "1.1" */
        def queryString: ptr[Char];   /* URL part after '?', not including '?', or
                                    NULL */
        def remoteUser: ptr[Char];    /* Authenticated user, or NULL if no auth
                                    used */
        def remoteAddr: array[Char, 48];       /* Client's IP address as a string. */

        def remoteIp: Int[64]; /* Client's IP address. Deprecated: use remote_addr instead */

        def contentLength: Int[64]; /* Length (in bytes) of the request body,
                                    can be -1 if no length was given. */
        def remotePort: Int;          /* Client's port */
        def isSsl: Int;               /* 1 if SSL-ed, 0 if not */
        def userData: ptr[Void];          /* User data pointer passed to mg_start() */
        def connData: ptr[Void];          /* Connection-specific user data */

        def numberHeaders: Int; /* Number of HTTP headers */
    };

    type Connection {
        def requestInfo: ptr[RequestInfo];
        def context: ptr[Context];
        def ssl: ptr;                 /* SSL descriptor */
        def clientSslContext: ptr;  /* SSL context for client connections */
        def client: ptr;     /* Connected client */
        def connectionBirthTime: Int;   /* Time (wall clock) when connection was
                                * established */
        def requestTime: Int; /* Time (since system start) when the request
                                * was received */
        def numberBytesSent: int[64];   /* Total bytes sent to client */
        def contentLen: int[64];      /* Content-Length header value */
        def consumedContent: int[64]; /* How many bytes of content have been read */
        def isChunked: int;           /* Transfer-Encoding is chunked: 0=no, 1=yes:
        //                         * data available, 2: all data read */
        // size_t chunk_remainder;   /* Unread data from the last chunk */
        // char *buf;                /* Buffer for received data */
        // char *path_info;          /* PATH_INFO part of the URL */

        // int must_close;       /* 1 if connection must be closed */
        // int in_error_handler; /* 1 if in handler for user defined error
        //                     * pages */
        // int internal_error;   /* 1 if an error occured while processing the
        //                     * request */

        // int buf_size;                /* Buffer size */
        // int request_len;             /* Size of the request + headers in a buffer */
        // int data_len;                /* Total size of data in a buffer */
        // int status_code;             /* HTTP reply status code, e.g. 200 */
        // int throttle;                /* Throttling, bytes/sec. <= 0 means no
        //                             * throttle */
        // time_t last_throttle_time;   /* Last time throttled data was sent */
        // int64_t last_throttle_bytes; /* Bytes sent this second */
        // pthread_mutex_t mutex;       /* Used by mg_(un)lock_connection to ensure
        //                             * atomic transmissions for websockets */
    };
    
    @expname[mg_start]
    func _mg_start(callbacks: ptr[Callbacks], user_data: Int, options: ptr[ptr[Char]]): ptr[Context];
    
    @expname[mg_stop]
    func closeServer(context: ptr[Context]): Void;

    @expname[mg_printf]
    func print(connection: ptr[Connection], format: ptr[Char], ...any): Int;

    @expname[mg_send_file]
    func sendFile(connection: ptr[Connection], fileName: ptr[Char]): Void;

    @expname[mg_get_request_info]
    func getRequestInfo(connection: ptr[Connection]): ptr[RequestInfo];

    func createServer(callback: ptr[func (connection: ptr[Connection]): Int], port: ptr[Char]): ptr[Context] {
        @shared 
        def context: ptr[Context];
        def callbacks: ptr[Callbacks] = Srl.Memory.alloc(Callbacks~size)~cast[ptr[Callbacks]];

        def options: array[ptr[Char], 3];
        options(0) = "listening_ports";
        options(1) = port;
        options(2) = 0;

        Srl.Memory.set(callbacks, 0, Callbacks~size);
        callbacks~cnt.beginRequest = callback;

        context = _mg_start(callbacks, 0, options~ptr);     
        Srl.Memory.free(callbacks);
        
        return context;
    };
};